Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> command
Rule 1     command -> BUY IF condition
Rule 2     command -> SELL IF condition
Rule 3     condition -> expression
Rule 4     condition -> NOT condition
Rule 5     condition -> condition AND condition
Rule 6     condition -> condition OR condition
Rule 7     expression -> PRICE
Rule 8     expression -> VOLUME
Rule 9     expression -> BALANCE
Rule 10    expression -> NUMBER
Rule 11    expression -> function_call
Rule 12    expression -> expression LT expression
Rule 13    expression -> expression LE expression
Rule 14    expression -> expression GT expression
Rule 15    expression -> expression GE expression
Rule 16    expression -> expression EQ expression
Rule 17    function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN
Rule 18    function_call -> SMA LPAREN NUMBER RPAREN
Rule 19    function_call -> EMA LPAREN NUMBER RPAREN
Rule 20    function_call -> RSI LPAREN NUMBER RPAREN
Rule 21    expression -> LPAREN condition RPAREN

Terminals, with rules where they appear

AND                  : 5
BALANCE              : 9
BUY                  : 1
COMMA                : 17
CROSSOVER            : 17
EMA                  : 19
EQ                   : 16
GE                   : 15
GT                   : 14
IF                   : 1 2
LE                   : 13
LPAREN               : 17 18 19 20 21
LT                   : 12
NOT                  : 4
NUMBER               : 10 18 19 20
OR                   : 6
PRICE                : 7
RPAREN               : 17 18 19 20 21
RSI                  : 20
SELL                 : 2
SMA                  : 18
VOLUME               : 8
error                : 

Nonterminals, with rules where they appear

command              : 0
condition            : 1 2 4 5 5 6 6 21
expression           : 3 12 12 13 13 14 14 15 15 16 16 17 17
function_call        : 11

Parsing method: LALR

state 0

    (0) S' -> . command
    (1) command -> . BUY IF condition
    (2) command -> . SELL IF condition

    BUY             shift and go to state 2
    SELL            shift and go to state 3

    command                        shift and go to state 1

state 1

    (0) S' -> command .



state 2

    (1) command -> BUY . IF condition

    IF              shift and go to state 4


state 3

    (2) command -> SELL . IF condition

    IF              shift and go to state 5


state 4

    (1) command -> BUY IF . condition
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 6
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 5

    (2) command -> SELL IF . condition
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 19
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 6

    (1) command -> BUY IF condition .
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    $end            reduce using rule 1 (command -> BUY IF condition .)
    AND             shift and go to state 20
    OR              shift and go to state 21


state 7

    (3) condition -> expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    AND             reduce using rule 3 (condition -> expression .)
    OR              reduce using rule 3 (condition -> expression .)
    $end            reduce using rule 3 (condition -> expression .)
    RPAREN          reduce using rule 3 (condition -> expression .)
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24
    GE              shift and go to state 25
    EQ              shift and go to state 26


state 8

    (4) condition -> NOT . condition
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 27
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 9

    (7) expression -> PRICE .

    LT              reduce using rule 7 (expression -> PRICE .)
    LE              reduce using rule 7 (expression -> PRICE .)
    GT              reduce using rule 7 (expression -> PRICE .)
    GE              reduce using rule 7 (expression -> PRICE .)
    EQ              reduce using rule 7 (expression -> PRICE .)
    AND             reduce using rule 7 (expression -> PRICE .)
    OR              reduce using rule 7 (expression -> PRICE .)
    $end            reduce using rule 7 (expression -> PRICE .)
    RPAREN          reduce using rule 7 (expression -> PRICE .)
    COMMA           reduce using rule 7 (expression -> PRICE .)


state 10

    (8) expression -> VOLUME .

    LT              reduce using rule 8 (expression -> VOLUME .)
    LE              reduce using rule 8 (expression -> VOLUME .)
    GT              reduce using rule 8 (expression -> VOLUME .)
    GE              reduce using rule 8 (expression -> VOLUME .)
    EQ              reduce using rule 8 (expression -> VOLUME .)
    AND             reduce using rule 8 (expression -> VOLUME .)
    OR              reduce using rule 8 (expression -> VOLUME .)
    $end            reduce using rule 8 (expression -> VOLUME .)
    RPAREN          reduce using rule 8 (expression -> VOLUME .)
    COMMA           reduce using rule 8 (expression -> VOLUME .)


state 11

    (9) expression -> BALANCE .

    LT              reduce using rule 9 (expression -> BALANCE .)
    LE              reduce using rule 9 (expression -> BALANCE .)
    GT              reduce using rule 9 (expression -> BALANCE .)
    GE              reduce using rule 9 (expression -> BALANCE .)
    EQ              reduce using rule 9 (expression -> BALANCE .)
    AND             reduce using rule 9 (expression -> BALANCE .)
    OR              reduce using rule 9 (expression -> BALANCE .)
    $end            reduce using rule 9 (expression -> BALANCE .)
    RPAREN          reduce using rule 9 (expression -> BALANCE .)
    COMMA           reduce using rule 9 (expression -> BALANCE .)


state 12

    (10) expression -> NUMBER .

    LT              reduce using rule 10 (expression -> NUMBER .)
    LE              reduce using rule 10 (expression -> NUMBER .)
    GT              reduce using rule 10 (expression -> NUMBER .)
    GE              reduce using rule 10 (expression -> NUMBER .)
    EQ              reduce using rule 10 (expression -> NUMBER .)
    AND             reduce using rule 10 (expression -> NUMBER .)
    OR              reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)
    COMMA           reduce using rule 10 (expression -> NUMBER .)


state 13

    (11) expression -> function_call .

    LT              reduce using rule 11 (expression -> function_call .)
    LE              reduce using rule 11 (expression -> function_call .)
    GT              reduce using rule 11 (expression -> function_call .)
    GE              reduce using rule 11 (expression -> function_call .)
    EQ              reduce using rule 11 (expression -> function_call .)
    AND             reduce using rule 11 (expression -> function_call .)
    OR              reduce using rule 11 (expression -> function_call .)
    $end            reduce using rule 11 (expression -> function_call .)
    RPAREN          reduce using rule 11 (expression -> function_call .)
    COMMA           reduce using rule 11 (expression -> function_call .)


state 14

    (21) expression -> LPAREN . condition RPAREN
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 28
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 15

    (17) function_call -> CROSSOVER . LPAREN expression COMMA expression RPAREN

    LPAREN          shift and go to state 29


state 16

    (18) function_call -> SMA . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 30


state 17

    (19) function_call -> EMA . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 31


state 18

    (20) function_call -> RSI . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 32


state 19

    (2) command -> SELL IF condition .
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    $end            reduce using rule 2 (command -> SELL IF condition .)
    AND             shift and go to state 20
    OR              shift and go to state 21


state 20

    (5) condition -> condition AND . condition
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 33
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 21

    (6) condition -> condition OR . condition
    (3) condition -> . expression
    (4) condition -> . NOT condition
    (5) condition -> . condition AND condition
    (6) condition -> . condition OR condition
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    NOT             shift and go to state 8
    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    condition                      shift and go to state 34
    expression                     shift and go to state 7
    function_call                  shift and go to state 13

state 22

    (12) expression -> expression LT . expression
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 35
    function_call                  shift and go to state 13

state 23

    (13) expression -> expression LE . expression
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 36
    function_call                  shift and go to state 13

state 24

    (14) expression -> expression GT . expression
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 37
    function_call                  shift and go to state 13

state 25

    (15) expression -> expression GE . expression
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 38
    function_call                  shift and go to state 13

state 26

    (16) expression -> expression EQ . expression
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 39
    function_call                  shift and go to state 13

state 27

    (4) condition -> NOT condition .
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    AND             reduce using rule 4 (condition -> NOT condition .)
    OR              reduce using rule 4 (condition -> NOT condition .)
    $end            reduce using rule 4 (condition -> NOT condition .)
    RPAREN          reduce using rule 4 (condition -> NOT condition .)

  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]


state 28

    (21) expression -> LPAREN condition . RPAREN
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    RPAREN          shift and go to state 40
    AND             shift and go to state 20
    OR              shift and go to state 21


state 29

    (17) function_call -> CROSSOVER LPAREN . expression COMMA expression RPAREN
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 41
    function_call                  shift and go to state 13

state 30

    (18) function_call -> SMA LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 42


state 31

    (19) function_call -> EMA LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 43


state 32

    (20) function_call -> RSI LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 44


state 33

    (5) condition -> condition AND condition .
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    AND             reduce using rule 5 (condition -> condition AND condition .)
    OR              reduce using rule 5 (condition -> condition AND condition .)
    $end            reduce using rule 5 (condition -> condition AND condition .)
    RPAREN          reduce using rule 5 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 20 ]
  ! OR              [ shift and go to state 21 ]


state 34

    (6) condition -> condition OR condition .
    (5) condition -> condition . AND condition
    (6) condition -> condition . OR condition

    OR              reduce using rule 6 (condition -> condition OR condition .)
    $end            reduce using rule 6 (condition -> condition OR condition .)
    RPAREN          reduce using rule 6 (condition -> condition OR condition .)
    AND             shift and go to state 20

  ! AND             [ reduce using rule 6 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 21 ]


state 35

    (12) expression -> expression LT expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    LT              reduce using rule 12 (expression -> expression LT expression .)
    LE              reduce using rule 12 (expression -> expression LT expression .)
    GT              reduce using rule 12 (expression -> expression LT expression .)
    GE              reduce using rule 12 (expression -> expression LT expression .)
    EQ              reduce using rule 12 (expression -> expression LT expression .)
    AND             reduce using rule 12 (expression -> expression LT expression .)
    OR              reduce using rule 12 (expression -> expression LT expression .)
    $end            reduce using rule 12 (expression -> expression LT expression .)
    RPAREN          reduce using rule 12 (expression -> expression LT expression .)
    COMMA           reduce using rule 12 (expression -> expression LT expression .)

  ! LT              [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 36

    (13) expression -> expression LE expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    LT              reduce using rule 13 (expression -> expression LE expression .)
    LE              reduce using rule 13 (expression -> expression LE expression .)
    GT              reduce using rule 13 (expression -> expression LE expression .)
    GE              reduce using rule 13 (expression -> expression LE expression .)
    EQ              reduce using rule 13 (expression -> expression LE expression .)
    AND             reduce using rule 13 (expression -> expression LE expression .)
    OR              reduce using rule 13 (expression -> expression LE expression .)
    $end            reduce using rule 13 (expression -> expression LE expression .)
    RPAREN          reduce using rule 13 (expression -> expression LE expression .)
    COMMA           reduce using rule 13 (expression -> expression LE expression .)

  ! LT              [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 37

    (14) expression -> expression GT expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    LT              reduce using rule 14 (expression -> expression GT expression .)
    LE              reduce using rule 14 (expression -> expression GT expression .)
    GT              reduce using rule 14 (expression -> expression GT expression .)
    GE              reduce using rule 14 (expression -> expression GT expression .)
    EQ              reduce using rule 14 (expression -> expression GT expression .)
    AND             reduce using rule 14 (expression -> expression GT expression .)
    OR              reduce using rule 14 (expression -> expression GT expression .)
    $end            reduce using rule 14 (expression -> expression GT expression .)
    RPAREN          reduce using rule 14 (expression -> expression GT expression .)
    COMMA           reduce using rule 14 (expression -> expression GT expression .)

  ! LT              [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 38

    (15) expression -> expression GE expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    LT              reduce using rule 15 (expression -> expression GE expression .)
    LE              reduce using rule 15 (expression -> expression GE expression .)
    GT              reduce using rule 15 (expression -> expression GE expression .)
    GE              reduce using rule 15 (expression -> expression GE expression .)
    EQ              reduce using rule 15 (expression -> expression GE expression .)
    AND             reduce using rule 15 (expression -> expression GE expression .)
    OR              reduce using rule 15 (expression -> expression GE expression .)
    $end            reduce using rule 15 (expression -> expression GE expression .)
    RPAREN          reduce using rule 15 (expression -> expression GE expression .)
    COMMA           reduce using rule 15 (expression -> expression GE expression .)

  ! LT              [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 39

    (16) expression -> expression EQ expression .
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    LT              reduce using rule 16 (expression -> expression EQ expression .)
    LE              reduce using rule 16 (expression -> expression EQ expression .)
    GT              reduce using rule 16 (expression -> expression EQ expression .)
    GE              reduce using rule 16 (expression -> expression EQ expression .)
    EQ              reduce using rule 16 (expression -> expression EQ expression .)
    AND             reduce using rule 16 (expression -> expression EQ expression .)
    OR              reduce using rule 16 (expression -> expression EQ expression .)
    $end            reduce using rule 16 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 16 (expression -> expression EQ expression .)
    COMMA           reduce using rule 16 (expression -> expression EQ expression .)

  ! LT              [ shift and go to state 22 ]
  ! LE              [ shift and go to state 23 ]
  ! GT              [ shift and go to state 24 ]
  ! GE              [ shift and go to state 25 ]
  ! EQ              [ shift and go to state 26 ]


state 40

    (21) expression -> LPAREN condition RPAREN .

    LT              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    LE              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    GT              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    GE              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    EQ              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    AND             reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    OR              reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    $end            reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 21 (expression -> LPAREN condition RPAREN .)
    COMMA           reduce using rule 21 (expression -> LPAREN condition RPAREN .)


state 41

    (17) function_call -> CROSSOVER LPAREN expression . COMMA expression RPAREN
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    COMMA           shift and go to state 45
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24
    GE              shift and go to state 25
    EQ              shift and go to state 26


state 42

    (18) function_call -> SMA LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 46


state 43

    (19) function_call -> EMA LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 47


state 44

    (20) function_call -> RSI LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 48


state 45

    (17) function_call -> CROSSOVER LPAREN expression COMMA . expression RPAREN
    (7) expression -> . PRICE
    (8) expression -> . VOLUME
    (9) expression -> . BALANCE
    (10) expression -> . NUMBER
    (11) expression -> . function_call
    (12) expression -> . expression LT expression
    (13) expression -> . expression LE expression
    (14) expression -> . expression GT expression
    (15) expression -> . expression GE expression
    (16) expression -> . expression EQ expression
    (21) expression -> . LPAREN condition RPAREN
    (17) function_call -> . CROSSOVER LPAREN expression COMMA expression RPAREN
    (18) function_call -> . SMA LPAREN NUMBER RPAREN
    (19) function_call -> . EMA LPAREN NUMBER RPAREN
    (20) function_call -> . RSI LPAREN NUMBER RPAREN

    PRICE           shift and go to state 9
    VOLUME          shift and go to state 10
    BALANCE         shift and go to state 11
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 14
    CROSSOVER       shift and go to state 15
    SMA             shift and go to state 16
    EMA             shift and go to state 17
    RSI             shift and go to state 18

    expression                     shift and go to state 49
    function_call                  shift and go to state 13

state 46

    (18) function_call -> SMA LPAREN NUMBER RPAREN .

    LT              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    LE              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    GT              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    GE              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    EQ              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    AND             reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    OR              reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    $end            reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    RPAREN          reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)
    COMMA           reduce using rule 18 (function_call -> SMA LPAREN NUMBER RPAREN .)


state 47

    (19) function_call -> EMA LPAREN NUMBER RPAREN .

    LT              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    LE              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    GT              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    GE              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    EQ              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    AND             reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    OR              reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    $end            reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    RPAREN          reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)
    COMMA           reduce using rule 19 (function_call -> EMA LPAREN NUMBER RPAREN .)


state 48

    (20) function_call -> RSI LPAREN NUMBER RPAREN .

    LT              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    LE              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    GT              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    GE              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    EQ              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    AND             reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    OR              reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    $end            reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    RPAREN          reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)
    COMMA           reduce using rule 20 (function_call -> RSI LPAREN NUMBER RPAREN .)


state 49

    (17) function_call -> CROSSOVER LPAREN expression COMMA expression . RPAREN
    (12) expression -> expression . LT expression
    (13) expression -> expression . LE expression
    (14) expression -> expression . GT expression
    (15) expression -> expression . GE expression
    (16) expression -> expression . EQ expression

    RPAREN          shift and go to state 50
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24
    GE              shift and go to state 25
    EQ              shift and go to state 26


state 50

    (17) function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .

    LT              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    LE              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    GT              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    GE              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    EQ              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    AND             reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    OR              reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    $end            reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    RPAREN          reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)
    COMMA           reduce using rule 17 (function_call -> CROSSOVER LPAREN expression COMMA expression RPAREN .)

